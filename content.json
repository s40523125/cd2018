{"meta":{"title":"Eazel","subtitle":"Eazel","description":"this is cd2018's blogs !","author":"Eazel","url":"http://s40523125.github.io/cd2018"},"pages":[{"title":"about","date":"2018-03-31T11:22:37.000Z","updated":"2018-03-31T11:22:37.307Z","comments":true,"path":"about/index.html","permalink":"http://s40523125.github.io/cd2018/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-03-31T10:34:44.000Z","updated":"2018-03-31T10:34:44.993Z","comments":true,"path":"categories/index.html","permalink":"http://s40523125.github.io/cd2018/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-03-31T11:22:18.000Z","updated":"2018-03-31T11:22:18.670Z","comments":true,"path":"tags/index.html","permalink":"http://s40523125.github.io/cd2018/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"分組期中報告","slug":"untitled-1524511212283","date":"2018-04-23T19:24:44.000Z","updated":"2018-04-23T19:28:15.576Z","comments":true,"path":"2018/04/24/untitled-1524511212283/","link":"","permalink":"http://s40523125.github.io/cd2018/2018/04/24/untitled-1524511212283/","excerpt":"","text":"各組的期中報告與自評內容包括: 在 V-rep 模擬平台中, 展示各組所選定的鋼球運動系統, 是否可以完成至少兩個週期的循環運動? 各組頂球機構的位移、速度與加速度分析, 手動運算是否與程式驗算或 V-rep 模擬相符? 詳細說明各組如何進行協同設計, 如何利用 Gitbook、Github 與近端或雲端主機增加設計流程效益? 提供各組鋼球運動系統的細部零件材料表、各零件工程圖與組立檔, 若使用 Solidworks, Inventor 或 Creo 請提供相關檔案, 若使用 Onshape, 請提供個別零組件與工程圖的網路連結. 所有組員的貢獻請各自使用學號登記下的 cd2018 倉儲展示, 各組期中報告則整理在各組的 Gitbook 中. 是否可以完成至少兩個週期的循環運動 ?https://www.youtube.com/embed/zzGsMgNdeEY 如何進行協同設計在這學期的協同課程中，我們第七小組所採用的協同方式是預先分配工作內容，像是負責整理目前所需程式的必要語法和相關應用資訊的，還有將上學期的機構做運動分析和將各部分零件佈圖成工程圖來標示上各個重要尺寸，還有整理以上資訊後將各週的課程過程記錄下來，整理心得和參考資料並且架設網誌將內容一併放置上網誌來進行進度追蹤。 如何利用 Gitbook、Github 與近端或雲端主機增加設計流程效益 ?在Gitbook中我們放置了上學期所使用Word檔來編寫的報告和我們每週的課程進度，在Gitbook中是使用Markdown的語法來編寫的，易寫、易讀的特性使得報告的呈現更簡潔、直觀、而又不失美感，而課程進度也方便我們各組員了解每周的課程目的需完成什麼，而開放式的編寫也使得每個組員能隨時共同編輯參考資料來讓小組互相交流。 而在Github的倉儲中我們放置了以Hexo部屬的網誌，還有鋼球運動機構的零組件檔，以及編排完成的工程圖，能更了解機構的尺寸和結構設計。 提供各組鋼球運動系統的細部零件材料表、各零件工程圖與組立檔 組立檔：Onshape 機構各零組件：https://github.com/s40523125/cd2018/tree/master/Folder/components draw/others 名稱 數量 主體 1 凸輪 1 升降板_1 - 7 7 檔板滑道 1 機構各工程圖：https://github.com/s40523125/cd2018/tree/master/Folder/components draw/dwg 所有組員的貢獻請各自使用學號登記下的 cd2018 倉儲展示 40523125：編寫Gitbook、編輯網誌、整理倉儲資料 40523126：編寫Gitbook、查詢資料、整理程式資料 40523127：編寫Gitbook、機構運動分析、繪製工程圖","categories":[],"tags":[]},{"title":"Lua基本邏輯符號教學","slug":"untitled-1524503356063","date":"2018-04-23T17:09:16.000Z","updated":"2018-04-23T17:19:31.962Z","comments":true,"path":"2018/04/24/untitled-1524503356063/","link":"","permalink":"http://s40523125.github.io/cd2018/2018/04/24/untitled-1524503356063/","excerpt":"","text":"Lua 是一種輕量小巧的腳本語言，用標準C語言編寫並以源代碼形式開放， 其設計目的是為了嵌入應用程序中，從而為應用程序提供靈活的擴展和定制功能。 Lua 是巴西里約熱內盧天主教大學（Pontifical Catholic University of Rio de Janeiro）裡的一個研究小組，由Roberto Ierusalimschy、Waldemar Celes 和Luiz Henrique de Figueiredo所組成並於1993年開發。 Lua 特性 輕量級 它用標準C語言編寫並以源代碼形式開放，編譯後僅僅一百餘K，可以很方便的嵌入別的程序裡。 可擴展 Lua提供了非常易於使用的擴展接口和機制：由宿主語言(通常是C或C++)提供這些功能，Lua可以使用它們，就像是本來就內置的功能一樣。 其它特性 支持面向過程(procedure-oriented)編程和函數式編程(functional programming)； 自動內存管理；只提供了一種通用類型的表（table），用它可以實現數組，哈希表，集合，對象； 語言內置模式匹配；閉包(closure)；函數也可以看做一個值；提供多線程（協同進程，並非操作系統所支持的線程）支持； 通過閉包和table可以很方便地支持面向對象編程所需要的一些關鍵機制，比如數據抽象，虛函數，繼承和重載等 關鍵詞以下列出了Lua 的保留關鍵字。保留關鍵字不能作為常量或變量或其他用戶自定義標示符： and break do else elseif end false for function if in local nil not or repeat return then true until while 基本邏輯符號運算講解:https://youtu.be/lFpWuZE2YN0 雖然現在只學到一點點基本lua程式，相信以後會學到更多的東西，但是英文和數學真的還要再加強許多，不然面對一些基本的程式時，還要再花時間去查詢，以及「自學」真的很重要，程式這方面很多都要靠自己去尋找網路上的資料摸索，不然出社會面對的可不是還有很多時間讓你去學。","categories":[],"tags":[]},{"title":"文章格式測試","slug":"untitled-1522469873670","date":"2018-03-31T12:15:59.000Z","updated":"2018-04-23T17:09:00.428Z","comments":true,"path":"2018/03/31/untitled-1522469873670/","link":"","permalink":"http://s40523125.github.io/cd2018/2018/03/31/untitled-1522469873670/","excerpt":"","text":"Markdown筆記概述Markdown的目標是希望實現「易讀、易寫」。一份Markdown 的文章，應該是一份純文字檔，並透過一些經過嚴謹慎選的符號標記文章中需要強調的文字或段落，例如粗體、鈄體、清單或是超連結以下就整理了一些常用的Markdown範例。 範例段落當我們在寫一份文件時，希望可以分多個段落，而且希望為這個段落起個響亮的名稱，而且將之放大，加粗，那在Markdown的寫法有兩種，一種是以setext的方式，以===當做第一階，另以---為第二階，而且可以任何數量存在，不影響結果。另一種寫法是以Atx的方式，以1~6個#則可代程h1~h6 例1# This is an H1: This is an H1:## This is an H2: This is an H2###### This is an H6: This is an H6區塊引言Markdown使用e-mail格試的引言方式，你只需要在句字的前面加&gt;即可 例2&gt; 這是引言 這是引言 &gt;&gt; 這是引言的引言 這是引言的引言 當然也有多行的引言你有以下兩種方式： 每一行都使用&gt; 懶得打這麼多&gt;，使用空白行表示結束引言 12&gt;這是引言 line 1&gt;這是引言 line 2 這是引言 line 1這是引言 line 2 也可以這樣12&gt; 這是引言 line 1這是引言line 2 這是引言 line 1這是引言 line 2 清單無序清單你可以使用12* 清單 1* 清單 2 清單 1 清單 2 也可以使用+與-來取代*12- 清單 1- 清單 2 清單 1 清單 2 有序清單直接使用數字加英文的句號，數字的部份只要是數字即可，系統會自動排序；當然為了文件易讀性，還是養成習慣數字按順序打吧！畢竟，你會用Markdown不就是為了易讀和易寫嗎！ 1. 第一條 2. 第二條 1. 第三條 第一條 第二條 第三條 程式碼區塊使用兩個TAB即可，記得在程式區塊碼那行前再多留一行空白行，不然常常會有問題，這是最保險的方式[tab][tab]程式碼區塊 程式碼區塊 分格線在一行中使用三個以上的*或-，同行中不能加入其他東西，但可以加空白12**** * * 以下是分格線還是分格線 連結This is [an example](http://example.com/ &quot;Title&quot;) inline link. This is an example inline link. This is [an example] [id] reference-style link. [id]: http://example.com/ &quot;Optional Title Here&quot; This is an example reference-style link. [Google][] [Google]: http://www.google.com/ &quot;google&quot; Google 強調*鈄體* 鈄體 **粗體** 粗體 ***粗鈄體*** 粗鈄體 行內程式碼用反引號來框住程式碥這是行內程式碼printf() 圖片![pic](http://hiyacc.com/wp-content/uploads/2013/02/october-sky-poster.jpg &quot;十月的天空&quot;) 十月的天空 自動連結&lt;www.google.com&gt; 跳脫字元在markdown中以下字元希望顯示時，需要前面\\ \\ 反斜線 ` 反引號 * 星號 _ 底線 {} 大括號 [] 方括號 () 括號 # 井字號 + 加號 - 減號 . 英文句點 ! 驚嘆號 \\*literal asterisks\\* literal asterisks 表格在markdown中，官方其實沒有提供語法來寫html表格，如果要插入表格，就只能直接用html標簽了，但有的版本的markdown已經實作現了表格，格式如下: 123456行數 內容1 編號|女朋友姓名|分手原因2 ---|---|---3 1|Irene|晚上不理我4 2|Jenny|早上不煮早餐5 3|Caiying|中午不上班 編號 女朋友姓名 分手原因 1 Irene 晚上不理我 2 Jenny 早上不煮早餐 3 Caiying 中午不上班 參考資料: [1]Markdown 語法說明","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-03-29T13:43:44.460Z","updated":"2018-03-29T13:43:44.460Z","comments":true,"path":"2018/03/29/hello-world/","link":"","permalink":"http://s40523125.github.io/cd2018/2018/03/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}